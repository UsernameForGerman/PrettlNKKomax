{"ast":null,"code":"var _jsxFileName = \"/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Tasks/CreateTaskPage/CreateTaskPageContainer.js\";\nimport CreateTaskPage from \"./CreateTaskPage\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport auth from \"../../AuthHOC/authHOC\";\nimport classes from \"./CreateTaskPage.module.css\";\nimport { connect } from \"react-redux\";\nimport { getHarnessesListThunk } from \"../../../reducers/harnessesReducer\";\nimport { getListThunk } from \"../../../reducers/komaxReducer\";\nimport HarnessSelector from \"../../../selectors/harnessSelector\";\nimport KappaSelector from \"../../../selectors/kappaSelector\";\nimport KomaxSelector from \"../../../selectors/komaxSelector\";\nimport FullScreenPreloader from \"../../common/Preloader/FullScreenPreloader\";\nimport { getKappasThunk } from \"../../../reducers/kappasReducer\";\nimport TasksSelector from \"../../../selectors/tasksSelector\";\nimport { createTaskThunk, getTasksThunk, setErrorAC, setValidAC } from \"../../../reducers/tasksReducer\";\nimport { getSealsListThunk } from \"../../../reducers/sealReducer\";\nimport { getTerminalListThunk } from \"../../../reducers/komaxTerminalReducer\";\n\nlet CreateTaskPageContainer = props => {\n  let [workType, setWorkType] = useState(\"parallel\");\n  let [loadingType, setLoadingType] = useState(\"new\");\n  let [multiselectOptions, setMultiselectOptions] = useState([]);\n  let [shouldContinue, setContinue] = useState(false);\n  let [harnessesData, setHarnessesData] = useState([]);\n  let [komaxesOptions, setKomaxesOptions] = useState([]);\n  let [kappasOptions, setKappasOptions] = useState([]);\n  const mount = useRef(true);\n  useEffect(() => {\n    if (mount) {\n      props.fetchHarnesses();\n      props.fetchKomaxes();\n      props.fetchKappas();\n      props.fetchKappas();\n      props.fetchTasks();\n    }\n\n    return () => {\n      mount.current = false;\n    };\n  }, [props.harnesses.length]);\n\n  let formatNumber = number => {\n    let replaced = number.toString().replace(\"\\-\", \"\");\n\n    while (replaced.toString().indexOf(\"-\") > 0) {\n      replaced = replaced.toString().replace(\"\\-\", \"\");\n    }\n\n    let formatted = Number(replaced);\n    return formatted;\n  };\n\n  let harnesses_options = props.harnesses.map(elem => {\n    return elem.harness_number;\n  }).sort((a, b) => {\n    return formatNumber(a) - formatNumber(b);\n  });\n  let komaxes_options = props.komaxes.map(elem => {\n    return elem.number;\n  });\n  let kappas_options = props.kappas.map(elem => {\n    return elem.number;\n  });\n\n  let addHarnessData = (number, e) => {\n    let data = harnessesData.filter(elem => elem[number]);\n    let text = e.target.value;\n    let arr = harnessesData.slice();\n\n    if (data.length === 0) {\n      let obj = {};\n      obj[number] = Number(text);\n      arr.push(obj);\n    } else {\n      arr.map(elem => {\n        if (elem[number]) {\n          elem[number] = Number(text);\n        }\n      });\n    }\n\n    setHarnessesData(arr);\n  };\n\n  let check = number => {\n    let numbers = props.tasks.map(elem => {\n      return elem.task_name;\n    }).filter(elem => elem === number);\n\n    if (numbers.length > 0) {\n      props.setError(\"Такой номер уже есть\");\n      props.setValid(false);\n    } else {\n      props.setError(\"\");\n      props.setValid(true);\n    }\n  };\n\n  let sendDataFirst = data => {\n    let shift = data.work_shift;\n    let request = {\n      'task_name': data.name,\n      'harnesses': multiselectOptions,\n      'komaxes': komaxesOptions,\n      'kappas': kappasOptions,\n      'shift': shift,\n      'type_of_allocation': workType,\n      'loading_type': loadingType\n    };\n    props.send(request);\n  };\n\n  let sendDataSecond = data => {\n    let d = {};\n    harnessesData.forEach(harnessItem => {\n      let key = Object.keys(harnessItem)[0];\n      d[key] = harnessItem[key];\n    });\n    let request = {\n      'harness_amount': d,\n      'task_name': data.name\n    };\n    props.send(request);\n  };\n\n  let fetch = () => {\n    props.fetchSeals();\n    props.fetchTerminals();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CreateTaskPage, {\n    workType: workType,\n    setWorkType: setWorkType,\n    loadingType: loadingType,\n    setLoadingType: setLoadingType,\n    harnesses_options: harnesses_options,\n    komaxes_options: komaxes_options,\n    kappas_options: kappas_options,\n    isValid: props.isValid,\n    errMsg: props.errMsg,\n    check: check,\n    mount: mount,\n    multiselectOptions: multiselectOptions,\n    setMultiselectOptions: setMultiselectOptions,\n    shouldContinue: shouldContinue,\n    setContinue: setContinue,\n    addHarnessData: addHarnessData,\n    sendDataFirst: sendDataFirst,\n    sendDataSecond: sendDataSecond,\n    canSend: props.canSend,\n    fetch: fetch,\n    komaxesOptions: komaxesOptions,\n    setKomaxesOptions: setKomaxesOptions,\n    kappasOptions: kappasOptions,\n    setKappasOptions: setKappasOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  })));\n};\n\nlet mapStateToProps = state => {\n  return {\n    tasks: TasksSelector.getList(state),\n    harnesses: HarnessSelector.getList(state),\n    komaxes: KomaxSelector.getList(state),\n    kappas: KappaSelector.getList(state),\n    isFetching: HarnessSelector.getFetching(state) || KomaxSelector.getFetching(state) || KappaSelector.getFetching(state),\n    errMsg: TasksSelector.getErrMsg(state),\n    isValid: TasksSelector.getValid(state),\n    canSend: TasksSelector.getCanSend(state)\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    fetchHarnesses: () => {\n      dispatch(getHarnessesListThunk());\n    },\n    fetchKomaxes: () => {\n      dispatch(getListThunk());\n    },\n    fetchKappas: () => {\n      dispatch(getKappasThunk());\n    },\n    fetchTasks: () => {\n      dispatch(getTasksThunk());\n    },\n    fetchSeals: () => {\n      dispatch(getSealsListThunk());\n    },\n    fetchTerminals: () => {\n      dispatch(getTerminalListThunk());\n    },\n    setError: error => {\n      dispatch(setErrorAC(error));\n    },\n    setValid: valid => {\n      dispatch(setValidAC(valid));\n    },\n    send: task => {\n      dispatch(createTaskThunk(task));\n    }\n  };\n};\n\nexport default auth(connect(mapStateToProps, mapDispatchToProps)(CreateTaskPageContainer));","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Tasks/CreateTaskPage/CreateTaskPageContainer.js"],"names":["CreateTaskPage","React","useEffect","useRef","useState","auth","classes","connect","getHarnessesListThunk","getListThunk","HarnessSelector","KappaSelector","KomaxSelector","FullScreenPreloader","getKappasThunk","TasksSelector","createTaskThunk","getTasksThunk","setErrorAC","setValidAC","getSealsListThunk","getTerminalListThunk","CreateTaskPageContainer","props","workType","setWorkType","loadingType","setLoadingType","multiselectOptions","setMultiselectOptions","shouldContinue","setContinue","harnessesData","setHarnessesData","komaxesOptions","setKomaxesOptions","kappasOptions","setKappasOptions","mount","fetchHarnesses","fetchKomaxes","fetchKappas","fetchTasks","current","harnesses","length","formatNumber","number","replaced","toString","replace","indexOf","formatted","Number","harnesses_options","map","elem","harness_number","sort","a","b","komaxes_options","komaxes","kappas_options","kappas","addHarnessData","e","data","filter","text","target","value","arr","slice","obj","push","check","numbers","tasks","task_name","setError","setValid","sendDataFirst","shift","work_shift","request","name","send","sendDataSecond","d","forEach","harnessItem","key","Object","keys","fetch","fetchSeals","fetchTerminals","container","isValid","errMsg","canSend","mapStateToProps","state","getList","isFetching","getFetching","getErrMsg","getValid","getCanSend","mapDispatchToProps","dispatch","error","valid","task"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,qBAAR,QAAoC,oCAApC;AACA,SAAQC,YAAR,QAA2B,gCAA3B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAAQC,eAAR,EAAyBC,aAAzB,EAAwCC,UAAxC,EAAoDC,UAApD,QAAqE,gCAArE;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,SAAQC,oBAAR,QAAmC,wCAAnC;;AAEA,IAAIC,uBAAuB,GAAIC,KAAD,IAAW;AACrC,MAAI,CAACC,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,UAAD,CAAtC;AACA,MAAI,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,KAAD,CAA5C;AACA,MAAI,CAACwB,kBAAD,EAAqBC,qBAArB,IAA8CzB,QAAQ,CAAC,EAAD,CAA1D;AACA,MAAI,CAAC0B,cAAD,EAAiBC,WAAjB,IAAgC3B,QAAQ,CAAC,KAAD,CAA5C;AACA,MAAI,CAAC4B,aAAD,EAAgBC,gBAAhB,IAAoC7B,QAAQ,CAAC,EAAD,CAAhD;AACA,MAAI,CAAC8B,cAAD,EAAiBC,iBAAjB,IAAsC/B,QAAQ,CAAC,EAAD,CAAlD;AACA,MAAI,CAACgC,aAAD,EAAgBC,gBAAhB,IAAoCjC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMkC,KAAK,GAAGnC,MAAM,CAAC,IAAD,CAApB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIoC,KAAJ,EAAU;AACNf,MAAAA,KAAK,CAACgB,cAAN;AACAhB,MAAAA,KAAK,CAACiB,YAAN;AACAjB,MAAAA,KAAK,CAACkB,WAAN;AACAlB,MAAAA,KAAK,CAACkB,WAAN;AACAlB,MAAAA,KAAK,CAACmB,UAAN;AACH;;AACD,WAAO,MAAM;AACTJ,MAAAA,KAAK,CAACK,OAAN,GAAgB,KAAhB;AACH,KAFD;AAGH,GAXQ,EAYL,CACIpB,KAAK,CAACqB,SAAN,CAAgBC,MADpB,CAZK,CAAT;;AAgBA,MAAIC,YAAY,GAAIC,MAAD,IAAY;AAC3B,QAAIC,QAAQ,GAAGD,MAAM,CAACE,QAAP,GAAkBC,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,CAAf;;AACA,WAAOF,QAAQ,CAACC,QAAT,GAAoBE,OAApB,CAA4B,GAA5B,IAAmC,CAA1C,EAA4C;AACxCH,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,QAAT,GAAoBC,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAX;AACH;;AACD,QAAIE,SAAS,GAAGC,MAAM,CAACL,QAAD,CAAtB;AACA,WAAOI,SAAP;AACH,GAPD;;AASA,MAAIE,iBAAiB,GAAG/B,KAAK,CAACqB,SAAN,CAAgBW,GAAhB,CAAoBC,IAAI,IAAI;AAChD,WAAOA,IAAI,CAACC,cAAZ;AACH,GAFuB,EAErBC,IAFqB,CAEhB,CAACC,CAAD,EAAGC,CAAH,KAAS;AACb,WAAOd,YAAY,CAACa,CAAD,CAAZ,GAAkBb,YAAY,CAACc,CAAD,CAArC;AACH,GAJuB,CAAxB;AAMA,MAAIC,eAAe,GAAGtC,KAAK,CAACuC,OAAN,CAAcP,GAAd,CAAkBC,IAAI,IAAI;AAC5C,WAAOA,IAAI,CAACT,MAAZ;AACH,GAFqB,CAAtB;AAIA,MAAIgB,cAAc,GAAGxC,KAAK,CAACyC,MAAN,CAAaT,GAAb,CAAiBC,IAAI,IAAI;AAC1C,WAAOA,IAAI,CAACT,MAAZ;AACH,GAFoB,CAArB;;AAIA,MAAIkB,cAAc,GAAG,CAAClB,MAAD,EAASmB,CAAT,KAAe;AAChC,QAAIC,IAAI,GAAGnC,aAAa,CAACoC,MAAd,CAAqBZ,IAAI,IAAIA,IAAI,CAACT,MAAD,CAAjC,CAAX;AACA,QAAIsB,IAAI,GAAGH,CAAC,CAACI,MAAF,CAASC,KAApB;AACA,QAAIC,GAAG,GAAGxC,aAAa,CAACyC,KAAd,EAAV;;AACA,QAAIN,IAAI,CAACtB,MAAL,KAAgB,CAApB,EAAsB;AAClB,UAAI6B,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAAC3B,MAAD,CAAH,GAAcM,MAAM,CAACgB,IAAD,CAApB;AACAG,MAAAA,GAAG,CAACG,IAAJ,CAASD,GAAT;AACH,KAJD,MAIO;AACHF,MAAAA,GAAG,CAACjB,GAAJ,CAASC,IAAD,IAAU;AACd,YAAIA,IAAI,CAACT,MAAD,CAAR,EAAkB;AACdS,UAAAA,IAAI,CAACT,MAAD,CAAJ,GAAeM,MAAM,CAACgB,IAAD,CAArB;AACH;AACJ,OAJD;AAKH;;AACDpC,IAAAA,gBAAgB,CAACuC,GAAD,CAAhB;AACH,GAhBD;;AAkBA,MAAII,KAAK,GAAI7B,MAAD,IAAY;AACpB,QAAI8B,OAAO,GAAGtD,KAAK,CAACuD,KAAN,CAAYvB,GAAZ,CAAiBC,IAAD,IAAU;AACpC,aAAOA,IAAI,CAACuB,SAAZ;AACH,KAFa,EAEXX,MAFW,CAEHZ,IAAD,IAAUA,IAAI,KAAKT,MAFf,CAAd;;AAGA,QAAI8B,OAAO,CAAChC,MAAR,GAAiB,CAArB,EAAuB;AACnBtB,MAAAA,KAAK,CAACyD,QAAN,CAAe,sBAAf;AACAzD,MAAAA,KAAK,CAAC0D,QAAN,CAAe,KAAf;AACH,KAHD,MAGO;AACH1D,MAAAA,KAAK,CAACyD,QAAN,CAAe,EAAf;AACAzD,MAAAA,KAAK,CAAC0D,QAAN,CAAe,IAAf;AACH;AACJ,GAXD;;AAaA,MAAIC,aAAa,GAAIf,IAAD,IAAU;AAC1B,QAAIgB,KAAK,GAAGhB,IAAI,CAACiB,UAAjB;AACA,QAAIC,OAAO,GAAG;AACV,mBAAclB,IAAI,CAACmB,IADT;AAEV,mBAAc1D,kBAFJ;AAGV,iBAAYM,cAHF;AAIV,gBAAWE,aAJD;AAKV,eAAU+C,KALA;AAMV,4BAAuB3D,QANb;AAOV,sBAAiBE;AAPP,KAAd;AAUAH,IAAAA,KAAK,CAACgE,IAAN,CAAWF,OAAX;AACH,GAbD;;AAeA,MAAIG,cAAc,GAAIrB,IAAD,IAAU;AAC3B,QAAIsB,CAAC,GAAG,EAAR;AACAzD,IAAAA,aAAa,CAAC0D,OAAd,CAAsBC,WAAW,IAAI;AACjC,UAAIC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyB,CAAzB,CAAV;AACAF,MAAAA,CAAC,CAACG,GAAD,CAAD,GAASD,WAAW,CAACC,GAAD,CAApB;AACH,KAHD;AAIA,QAAIP,OAAO,GAAG;AACV,wBAAmBI,CADT;AAEV,mBAActB,IAAI,CAACmB;AAFT,KAAd;AAKA/D,IAAAA,KAAK,CAACgE,IAAN,CAAWF,OAAX;AACH,GAZD;;AAcA,MAAIU,KAAK,GAAG,MAAM;AACdxE,IAAAA,KAAK,CAACyE,UAAN;AACAzE,IAAAA,KAAK,CAAC0E,cAAN;AACH,GAHD;;AAKA,sBACI,uDACI;AAAK,IAAA,SAAS,EAAE3F,OAAO,CAAC4F,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ,oBAAC,cAAD;AACI,IAAA,QAAQ,EAAE1E,QADd;AAEI,IAAA,WAAW,EAAEC,WAFjB;AAGI,IAAA,WAAW,EAAEC,WAHjB;AAII,IAAA,cAAc,EAAEC,cAJpB;AAKI,IAAA,iBAAiB,EAAE2B,iBALvB;AAMI,IAAA,eAAe,EAAEO,eANrB;AAOI,IAAA,cAAc,EAAEE,cAPpB;AAQI,IAAA,OAAO,EAAExC,KAAK,CAAC4E,OARnB;AASI,IAAA,MAAM,EAAE5E,KAAK,CAAC6E,MATlB;AAUI,IAAA,KAAK,EAAExB,KAVX;AAWI,IAAA,KAAK,EAAEtC,KAXX;AAYI,IAAA,kBAAkB,EAAEV,kBAZxB;AAaI,IAAA,qBAAqB,EAAEC,qBAb3B;AAcI,IAAA,cAAc,EAAEC,cAdpB;AAeI,IAAA,WAAW,EAAEC,WAfjB;AAgBI,IAAA,cAAc,EAAEkC,cAhBpB;AAiBI,IAAA,aAAa,EAAEiB,aAjBnB;AAkBI,IAAA,cAAc,EAAEM,cAlBpB;AAmBI,IAAA,OAAO,EAAEjE,KAAK,CAAC8E,OAnBnB;AAoBI,IAAA,KAAK,EAAEN,KApBX;AAqBI,IAAA,cAAc,EAAE7D,cArBpB;AAsBI,IAAA,iBAAiB,EAAEC,iBAtBvB;AAuBI,IAAA,aAAa,EAAEC,aAvBnB;AAwBI,IAAA,gBAAgB,EAAEC,gBAxBtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR,CADJ,CADJ;AAgCH,CAlJD;;AAoJA,IAAIiE,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAM;AACFzB,IAAAA,KAAK,EAAG/D,aAAa,CAACyF,OAAd,CAAsBD,KAAtB,CADN;AAEF3D,IAAAA,SAAS,EAAGlC,eAAe,CAAC8F,OAAhB,CAAwBD,KAAxB,CAFV;AAGFzC,IAAAA,OAAO,EAAGlD,aAAa,CAAC4F,OAAd,CAAsBD,KAAtB,CAHR;AAIFvC,IAAAA,MAAM,EAAGrD,aAAa,CAAC6F,OAAd,CAAsBD,KAAtB,CAJP;AAKFE,IAAAA,UAAU,EAAG/F,eAAe,CAACgG,WAAhB,CAA4BH,KAA5B,KAAsC3F,aAAa,CAAC8F,WAAd,CAA0BH,KAA1B,CAAtC,IAA0E5F,aAAa,CAAC+F,WAAd,CAA0BH,KAA1B,CALrF;AAMFH,IAAAA,MAAM,EAAGrF,aAAa,CAAC4F,SAAd,CAAwBJ,KAAxB,CANP;AAOFJ,IAAAA,OAAO,EAAGpF,aAAa,CAAC6F,QAAd,CAAuBL,KAAvB,CAPR;AAQFF,IAAAA,OAAO,EAAGtF,aAAa,CAAC8F,UAAd,CAAyBN,KAAzB;AARR,GAAN;AAUH,CAXD;;AAaA,IAAIO,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAM;AACFxE,IAAAA,cAAc,EAAG,MAAM;AACnBwE,MAAAA,QAAQ,CAACvG,qBAAqB,EAAtB,CAAR;AACH,KAHC;AAKFgC,IAAAA,YAAY,EAAG,MAAM;AACjBuE,MAAAA,QAAQ,CAACtG,YAAY,EAAb,CAAR;AACH,KAPC;AASFgC,IAAAA,WAAW,EAAG,MAAM;AAChBsE,MAAAA,QAAQ,CAACjG,cAAc,EAAf,CAAR;AACH,KAXC;AAaF4B,IAAAA,UAAU,EAAG,MAAM;AACfqE,MAAAA,QAAQ,CAAC9F,aAAa,EAAd,CAAR;AACH,KAfC;AAiBF+E,IAAAA,UAAU,EAAG,MAAM;AACfe,MAAAA,QAAQ,CAAC3F,iBAAiB,EAAlB,CAAR;AACH,KAnBC;AAqBF6E,IAAAA,cAAc,EAAG,MAAM;AACnBc,MAAAA,QAAQ,CAAC1F,oBAAoB,EAArB,CAAR;AACH,KAvBC;AAyBF2D,IAAAA,QAAQ,EAAIgC,KAAD,IAAW;AAClBD,MAAAA,QAAQ,CAAC7F,UAAU,CAAC8F,KAAD,CAAX,CAAR;AACH,KA3BC;AA6BF/B,IAAAA,QAAQ,EAAIgC,KAAD,IAAW;AAClBF,MAAAA,QAAQ,CAAC5F,UAAU,CAAC8F,KAAD,CAAX,CAAR;AACH,KA/BC;AAiCF1B,IAAAA,IAAI,EAAI2B,IAAD,IAAU;AACbH,MAAAA,QAAQ,CAAC/F,eAAe,CAACkG,IAAD,CAAhB,CAAR;AACH;AAnCC,GAAN;AAqCH,CAtCD;;AAwCA,eAAe7G,IAAI,CAACE,OAAO,CAAC+F,eAAD,EAAkBQ,kBAAlB,CAAP,CAA6CxF,uBAA7C,CAAD,CAAnB","sourcesContent":["import CreateTaskPage from \"./CreateTaskPage\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport auth from \"../../AuthHOC/authHOC\";\nimport classes from \"./CreateTaskPage.module.css\";\nimport {connect} from \"react-redux\";\nimport {getHarnessesListThunk} from \"../../../reducers/harnessesReducer\";\nimport {getListThunk} from \"../../../reducers/komaxReducer\";\nimport HarnessSelector from \"../../../selectors/harnessSelector\";\nimport KappaSelector from \"../../../selectors/kappaSelector\";\nimport KomaxSelector from \"../../../selectors/komaxSelector\";\nimport FullScreenPreloader from \"../../common/Preloader/FullScreenPreloader\";\nimport {getKappasThunk} from \"../../../reducers/kappasReducer\";\nimport TasksSelector from \"../../../selectors/tasksSelector\";\nimport {createTaskThunk, getTasksThunk, setErrorAC, setValidAC} from \"../../../reducers/tasksReducer\";\nimport {getSealsListThunk} from \"../../../reducers/sealReducer\";\nimport {getTerminalListThunk} from \"../../../reducers/komaxTerminalReducer\";\n\nlet CreateTaskPageContainer = (props) => {\n    let [workType, setWorkType] = useState(\"parallel\");\n    let [loadingType, setLoadingType] = useState(\"new\");\n    let [multiselectOptions, setMultiselectOptions] = useState([]);\n    let [shouldContinue, setContinue] = useState(false);\n    let [harnessesData, setHarnessesData] = useState([]);\n    let [komaxesOptions, setKomaxesOptions] = useState([]);\n    let [kappasOptions, setKappasOptions] = useState([]);\n    const mount = useRef(true);\n\n    useEffect(() => {\n        if (mount){\n            props.fetchHarnesses();\n            props.fetchKomaxes();\n            props.fetchKappas();\n            props.fetchKappas();\n            props.fetchTasks();\n        }\n        return () => {\n            mount.current = false;\n        }\n    },\n        [\n            props.harnesses.length\n        ]);\n\n    let formatNumber = (number) => {\n        let replaced = number.toString().replace(\"\\-\", \"\");\n        while (replaced.toString().indexOf(\"-\") > 0){\n            replaced = replaced.toString().replace(\"\\-\", \"\");\n        }\n        let formatted = Number(replaced);\n        return formatted;\n    }\n\n    let harnesses_options = props.harnesses.map(elem => {\n        return elem.harness_number;\n    }).sort((a,b) => {\n        return formatNumber(a) - formatNumber(b);\n    });\n\n    let komaxes_options = props.komaxes.map(elem => {\n        return elem.number;\n    });\n\n    let kappas_options = props.kappas.map(elem => {\n        return elem.number;\n    });\n\n    let addHarnessData = (number, e) => {\n        let data = harnessesData.filter(elem => elem[number]);\n        let text = e.target.value;\n        let arr = harnessesData.slice();\n        if (data.length === 0){\n            let obj = {};\n            obj[number] = Number(text);\n            arr.push(obj);\n        } else {\n            arr.map((elem) => {\n                if (elem[number]) {\n                    elem[number] = Number(text);\n                }\n            });\n        }\n        setHarnessesData(arr);\n    }\n\n    let check = (number) => {\n        let numbers = props.tasks.map((elem) => {\n            return elem.task_name;\n        }).filter((elem) => elem === number);\n        if (numbers.length > 0){\n            props.setError(\"Такой номер уже есть\");\n            props.setValid(false);\n        } else {\n            props.setError(\"\");\n            props.setValid(true);\n        }\n    }\n\n    let sendDataFirst = (data) => {\n        let shift = data.work_shift;\n        let request = {\n            'task_name' : data.name,\n            'harnesses' : multiselectOptions,\n            'komaxes' : komaxesOptions,\n            'kappas' : kappasOptions,\n            'shift' : shift,\n            'type_of_allocation' : workType,\n            'loading_type' : loadingType\n        }\n\n        props.send(request);\n    }\n\n    let sendDataSecond = (data) => {\n        let d = {};\n        harnessesData.forEach(harnessItem => {\n            let key = Object.keys(harnessItem)[0];\n            d[key] = harnessItem[key];\n        })\n        let request = {\n            'harness_amount' : d,\n            'task_name' : data.name\n        }\n\n        props.send(request);\n    }\n\n    let fetch = () => {\n        props.fetchSeals();\n        props.fetchTerminals();\n    }\n\n    return(\n        <>\n            <div className={classes.container}>\n                    <CreateTaskPage\n                        workType={workType}\n                        setWorkType={setWorkType}\n                        loadingType={loadingType}\n                        setLoadingType={setLoadingType}\n                        harnesses_options={harnesses_options}\n                        komaxes_options={komaxes_options}\n                        kappas_options={kappas_options}\n                        isValid={props.isValid}\n                        errMsg={props.errMsg}\n                        check={check}\n                        mount={mount}\n                        multiselectOptions={multiselectOptions}\n                        setMultiselectOptions={setMultiselectOptions}\n                        shouldContinue={shouldContinue}\n                        setContinue={setContinue}\n                        addHarnessData={addHarnessData}\n                        sendDataFirst={sendDataFirst}\n                        sendDataSecond={sendDataSecond}\n                        canSend={props.canSend}\n                        fetch={fetch}\n                        komaxesOptions={komaxesOptions}\n                        setKomaxesOptions={setKomaxesOptions}\n                        kappasOptions={kappasOptions}\n                        setKappasOptions={setKappasOptions}\n                    />\n               </div>\n        </>\n    )\n}\n\nlet mapStateToProps = (state) => {\n    return{\n        tasks : TasksSelector.getList(state),\n        harnesses : HarnessSelector.getList(state),\n        komaxes : KomaxSelector.getList(state),\n        kappas : KappaSelector.getList(state),\n        isFetching : HarnessSelector.getFetching(state) || KomaxSelector.getFetching(state) || KappaSelector.getFetching(state),\n        errMsg : TasksSelector.getErrMsg(state),\n        isValid : TasksSelector.getValid(state),\n        canSend : TasksSelector.getCanSend(state)\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return{\n        fetchHarnesses : () => {\n            dispatch(getHarnessesListThunk())\n        },\n\n        fetchKomaxes : () => {\n            dispatch(getListThunk())\n        },\n\n        fetchKappas : () => {\n            dispatch(getKappasThunk())\n        },\n\n        fetchTasks : () => {\n            dispatch(getTasksThunk())\n        },\n\n        fetchSeals : () => {\n            dispatch(getSealsListThunk());\n        },\n\n        fetchTerminals : () => {\n            dispatch(getTerminalListThunk());\n        },\n\n        setError : (error) => {\n            dispatch(setErrorAC(error))\n        },\n\n        setValid : (valid) => {\n            dispatch(setValidAC(valid))\n        },\n\n        send : (task) => {\n            dispatch(createTaskThunk(task))\n        }\n    }\n}\n\nexport default auth(connect(mapStateToProps, mapDispatchToProps)(CreateTaskPageContainer));"]},"metadata":{},"sourceType":"module"}
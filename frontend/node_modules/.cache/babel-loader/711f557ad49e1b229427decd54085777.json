{"ast":null,"code":"import task_api from \"../DAL/task/task_api\";\nimport task_status from \"../DAL/task_status/task_status\";\nimport { logoutThunk } from \"./authReducer\";\nimport handle401 from \"./handle401\";\nconst initialState = {\n  isFetching: false,\n  tasksList: [],\n  errMsg: \"\",\n  isValid: true,\n  canSend: false,\n  status: {\n    harnesses: []\n  }\n};\nconst TOGGLE_FETCHING = \"TASKS/TOGGLE_FETCHING\";\nconst SET_LIST = \"TASKS/TOGGLE_SET_LIST\";\nconst SET_ERR_MSG = \"TASKS/ERROR\";\nconst SET_VALID = \"TASKS/VALID\";\nconst SET_CAN_SEND = \"TASKS/CAN_SEND\";\nconst SET_STATUS = \"TASKS/SET_STATUS\";\n\nconst tasksReducer = (state = initialState, action) => {\n  let stateCopy = { ...state\n  };\n\n  switch (action.type) {\n    case TOGGLE_FETCHING:\n      {\n        stateCopy.isFetching = !stateCopy.isFetching;\n        break;\n      }\n\n    case SET_LIST:\n      {\n        stateCopy.tasksList = action.list;\n        break;\n      }\n\n    case SET_ERR_MSG:\n      {\n        stateCopy.errMsg = action.error;\n        break;\n      }\n\n    case SET_VALID:\n      {\n        stateCopy.isValid = action.isValid;\n        break;\n      }\n\n    case SET_CAN_SEND:\n      {\n        stateCopy.canSend = action.canSend;\n        break;\n      }\n\n    case SET_STATUS:\n      {\n        stateCopy.status = action.status;\n        break;\n      }\n  }\n\n  return stateCopy;\n};\n\nconst toggleFetchAC = () => {\n  return {\n    type: TOGGLE_FETCHING\n  };\n};\n\nconst canSendAC = send => {\n  return {\n    type: SET_CAN_SEND,\n    canSend: send\n  };\n};\n\nconst setListAC = list => {\n  return {\n    type: SET_LIST,\n    list: list\n  };\n};\n\nconst setValidAC = isValid => {\n  return {\n    type: SET_VALID,\n    isValid: isValid\n  };\n};\n\nconst setErrorAC = error => {\n  return {\n    type: SET_ERR_MSG,\n    error: error\n  };\n};\n\nconst setStatusAC = status => {\n  return {\n    type: SET_STATUS,\n    status: status\n  };\n};\n\nconst getTasksThunk = () => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    task_api.getKomaxTasks().then(data => {\n      if (data === \"\") data = [];\n      dispatch(setListAC(data));\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n      dispatch(toggleFetchAC());\n    });\n  };\n};\n\nconst createTaskThunk = task => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    task_api.createTask(task).then(data => {\n      dispatch(canSendAC(true));\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nconst updateTaskThunk = task => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    task_api.updateTask(task).then(data => {\n      dispatch(getTasksThunk());\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nlet getStatusThunk = () => {\n  return dispatch => {\n    task_status.getStatuses().then(resp => {\n      dispatch(setStatusAC(resp));\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nlet deleteTaskThunk = task => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    task_api.deleteTask(task).then(resp => {\n      dispatch(getTasksThunk());\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nexport { tasksReducer, createTaskThunk, updateTaskThunk, getTasksThunk, setErrorAC, setValidAC, getStatusThunk, deleteTaskThunk };","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/reducers/tasksReducer.js"],"names":["task_api","task_status","logoutThunk","handle401","initialState","isFetching","tasksList","errMsg","isValid","canSend","status","harnesses","TOGGLE_FETCHING","SET_LIST","SET_ERR_MSG","SET_VALID","SET_CAN_SEND","SET_STATUS","tasksReducer","state","action","stateCopy","type","list","error","toggleFetchAC","canSendAC","send","setListAC","setValidAC","setErrorAC","setStatusAC","getTasksThunk","dispatch","getKomaxTasks","then","data","catch","err","createTaskThunk","task","createTask","updateTaskThunk","updateTask","getStatusThunk","getStatuses","resp","deleteTaskThunk","deleteTask"],"mappings":"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","sourcesContent":["import task_api from \"../DAL/task/task_api\";\nimport task_status from \"../DAL/task_status/task_status\";\nimport {logoutThunk} from \"./authReducer\";\nimport handle401 from \"./handle401\";\nconst initialState = {\n    isFetching : false,\n    tasksList : [],\n    errMsg : \"\",\n    isValid : true,\n    canSend : false,\n    status : {\n        harnesses : []\n    }\n}\n\nconst TOGGLE_FETCHING = \"TASKS/TOGGLE_FETCHING\";\nconst SET_LIST = \"TASKS/TOGGLE_SET_LIST\";\nconst SET_ERR_MSG = \"TASKS/ERROR\";\nconst SET_VALID = \"TASKS/VALID\";\nconst SET_CAN_SEND = \"TASKS/CAN_SEND\";\nconst SET_STATUS = \"TASKS/SET_STATUS\";\n\nconst tasksReducer = (state = initialState, action) => {\n    let stateCopy = {...state};\n    switch (action.type) {\n        case TOGGLE_FETCHING : {\n            stateCopy.isFetching = !stateCopy.isFetching;\n            break;\n        }\n\n        case SET_LIST : {\n            stateCopy.tasksList = action.list;\n            break;\n        }\n\n        case SET_ERR_MSG : {\n            stateCopy.errMsg = action.error;\n            break;\n        }\n\n        case SET_VALID : {\n            stateCopy.isValid = action.isValid;\n            break;\n        }\n\n        case SET_CAN_SEND : {\n            stateCopy.canSend = action.canSend;\n            break;\n        }\n\n        case SET_STATUS : {\n            stateCopy.status = action.status;\n            break;\n        }\n    }\n    return stateCopy;\n}\n\nconst toggleFetchAC = () => {\n    return {\n        type : TOGGLE_FETCHING\n    }\n}\n\nconst canSendAC = (send) => {\n    return {\n        type : SET_CAN_SEND,\n        canSend : send\n    }\n}\n\nconst setListAC = (list) => {\n    return {\n        type : SET_LIST,\n        list : list\n    }\n}\n\nconst setValidAC = (isValid) => {\n    return {\n        type : SET_VALID,\n        isValid : isValid\n    }\n}\n\nconst setErrorAC = (error) => {\n    return {\n        type : SET_ERR_MSG,\n        error : error\n    }\n}\n\nconst setStatusAC = (status) => {\n    return {\n        type : SET_STATUS,\n        status : status\n    }\n}\n\nconst getTasksThunk = () => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        task_api.getKomaxTasks().then((data) => {\n            if (data === \"\") data = [];\n            dispatch(setListAC(data));\n            dispatch(toggleFetchAC());\n        }).catch(err => {\n            handle401(err, dispatch);\n            dispatch(toggleFetchAC())\n        });\n    }\n}\n\nconst createTaskThunk = (task) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        task_api.createTask(task)\n            .then((data) => {\n                dispatch(canSendAC(true));\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch);\n            });\n    }\n}\n\nconst updateTaskThunk = (task) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        task_api.updateTask(task)\n            .then((data) => {\n                dispatch(getTasksThunk());\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch);\n            });\n    }\n}\n\nlet getStatusThunk = () => {\n    return (dispatch) => {\n        task_status.getStatuses()\n            .then(resp => {\n                dispatch(setStatusAC(resp));\n            })\n            .catch(err => {\n                handle401(err, dispatch);\n            });\n    }\n}\n\nlet deleteTaskThunk = (task) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        task_api.deleteTask(task)\n            .then(resp => {\n                dispatch(getTasksThunk());\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch)\n            })\n    }\n}\n\nexport {tasksReducer, createTaskThunk, updateTaskThunk, getTasksThunk, setErrorAC, setValidAC, getStatusThunk, deleteTaskThunk}"]},"metadata":{},"sourceType":"module"}
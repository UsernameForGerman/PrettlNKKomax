{"ast":null,"code":"import komaxApi from \"../DAL/komax/komax-api\";\nimport handle401 from \"./handle401\";\nconst initialState = {\n  isFetching: false,\n  komaxList: [],\n  statuses: []\n};\nconst TOGGLE_FETCHING = \"KOMAX/TOGGLE_FETCHING\";\nconst SET_LIST = \"KOMAX/TOGGLE_SET_LIST\";\nconst SET_STATUSES = \"KOMAX/STATUSES\";\n\nconst komaxReducer = (state = initialState, action) => {\n  let stateCopy = { ...state\n  };\n\n  switch (action.type) {\n    case TOGGLE_FETCHING:\n      {\n        stateCopy.isFetching = !stateCopy.isFetching;\n        break;\n      }\n\n    case SET_LIST:\n      {\n        stateCopy.komaxList = action.list.sort((elem, elem2) => {\n          return elem.number - elem2.number;\n        });\n        break;\n      }\n\n    case SET_STATUSES:\n      {\n        stateCopy.statuses = action.statuses;\n      }\n  }\n\n  return stateCopy;\n};\n\nconst toggleFetchAC = () => {\n  return {\n    type: TOGGLE_FETCHING\n  };\n};\n\nconst setListAC = list => {\n  return {\n    type: SET_LIST,\n    list: list\n  };\n};\n\nconst setStatusesAC = statuses => {\n  return {\n    type: SET_STATUSES,\n    statuses: statuses\n  };\n};\n\nconst getListThunk = () => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    komaxApi.getKomaxList().then(data => {\n      dispatch(setListAC(data));\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nconst createKomaxThunk = komax => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    komaxApi.createKomax(komax).then(data => {\n      dispatch(getListThunk());\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nconst updateKomaxThunk = komax => {\n  return dispatch => {\n    dispatch(toggleFetchAC());\n    komaxApi.updateKomax(komax).then(data => {\n      dispatch(getListThunk());\n      dispatch(toggleFetchAC());\n    }).catch(err => {\n      handle401(err, dispatch);\n    });\n  };\n};\n\nconst getStatusesThunk = () => {\n  return dispatch => {\n    let send = () => {\n      komaxApi.getStatuses().then(resp => {\n        let path = window.location.pathname;\n\n        if (path === \"/komaxes\") {\n          dispatch(setStatusesAC(resp));\n          setTimeout(() => {\n            send();\n          }, 2000);\n        } else {\n          return '';\n        }\n      }).catch(err => {\n        handle401(err, dispatch);\n      });\n    };\n\n    send();\n  };\n};\n\nexport { toggleFetchAC, setListAC, komaxReducer, getListThunk, createKomaxThunk, updateKomaxThunk, getStatusesThunk };","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/reducers/komaxReducer.js"],"names":["komaxApi","handle401","initialState","isFetching","komaxList","statuses","TOGGLE_FETCHING","SET_LIST","SET_STATUSES","komaxReducer","state","action","stateCopy","type","list","sort","elem","elem2","number","toggleFetchAC","setListAC","setStatusesAC","getListThunk","dispatch","getKomaxList","then","data","catch","err","createKomaxThunk","komax","createKomax","updateKomaxThunk","updateKomax","getStatusesThunk","send","getStatuses","resp","path","window","location","pathname","setTimeout"],"mappings":"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","sourcesContent":["import komaxApi from \"../DAL/komax/komax-api\";\nimport handle401 from \"./handle401\";\n\nconst initialState = {\n    isFetching : false,\n    komaxList : [],\n    statuses : []\n}\n\nconst TOGGLE_FETCHING = \"KOMAX/TOGGLE_FETCHING\";\nconst SET_LIST = \"KOMAX/TOGGLE_SET_LIST\";\nconst SET_STATUSES = \"KOMAX/STATUSES\";\n\nconst komaxReducer = (state = initialState, action) => {\n    let stateCopy = {...state};\n    switch (action.type) {\n        case TOGGLE_FETCHING : {\n            stateCopy.isFetching = !stateCopy.isFetching;\n            break;\n        }\n\n        case SET_LIST : {\n            stateCopy.komaxList = action.list.sort((elem, elem2) => {\n                return elem.number - elem2.number\n            });\n            break;\n        }\n\n        case SET_STATUSES : {\n            stateCopy.statuses = action.statuses\n        }\n    }\n    return stateCopy;\n}\n\nconst toggleFetchAC = () => {\n    return {\n        type : TOGGLE_FETCHING\n    }\n}\n\nconst setListAC = (list) => {\n    return {\n        type : SET_LIST,\n        list : list\n    }\n}\n\nconst setStatusesAC = (statuses) => {\n    return {\n        type : SET_STATUSES,\n        statuses : statuses\n    }\n}\n\nconst getListThunk = () => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        komaxApi.getKomaxList()\n            .then((data) => {\n                dispatch(setListAC(data));\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch)\n            });\n    }\n}\n\nconst createKomaxThunk = (komax) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        komaxApi.createKomax(komax)\n            .then((data) => {\n                dispatch(getListThunk());\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch)\n            });\n    }\n}\n\nconst updateKomaxThunk = (komax) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        komaxApi.updateKomax(komax)\n            .then((data) => {\n                dispatch(getListThunk());\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch)\n            });\n    }\n}\n\nconst getStatusesThunk = () => {\n    return (dispatch) => {\n        let send = () => {\n            komaxApi.getStatuses()\n                .then(resp => {\n                    let path = window.location.pathname;\n                    if (path === \"/komaxes\"){\n                        dispatch(setStatusesAC(resp));\n                        setTimeout(() => {\n                            send();\n                        }, 2000);\n                    } else {\n                        return '';\n                    }\n                })\n                .catch(err => {\n                    handle401(err, dispatch)\n                })\n        }\n        send();\n    }\n}\n\nexport {toggleFetchAC, setListAC, komaxReducer, getListThunk, createKomaxThunk, updateKomaxThunk, getStatusesThunk};"]},"metadata":{},"sourceType":"module"}
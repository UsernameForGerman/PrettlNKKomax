{"ast":null,"code":"var _jsxFileName = \"/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Komaxes/KappaModal/KappaModalForm.js\";\nimport React, { useState } from \"react\";\nimport classes from \"./KappaModalForm.module.css\";\nimport createKomax from \"../../../DAL/models/komax\";\nimport SaveButton from \"../../common/SaveButton/SaveButton\";\nimport { FormattedMessage } from 'react-intl';\nimport { Multiselect } from 'multiselect-react-dropdown';\n\nlet KappaModalForm = props => {\n  let currKomax = props.selected;\n\n  if (!currKomax) {\n    currKomax = createKomax({});\n  }\n\n  let komaxNumberRef = React.createRef();\n  let statusRef = React.createRef();\n\n  let collectData = e => {\n    props.close();\n    let data = {\n      number: komaxNumberRef.current.value,\n      status: statusRef.current.value\n    };\n    props.send(data);\n  };\n\n  let isInEditMode = props.heading === \"Изменить существующий аппарат\";\n  let isNumberValid = props.numberErrMsg.length === 0;\n  let isIdValid = props.idErrMsg.length === 0;\n\n  let check = e => {\n    if (!isInEditMode) {\n      let number = Number(komaxNumberRef.current.value);\n      props.checkValid(number);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ModalForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, props.heading), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: props.close,\n    className: classes.closeBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"X\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.inputs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"komax.number_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: `${classes.input} ${!isNumberValid ? classes.invalidInput : \"\"}`,\n    ref: komaxNumberRef,\n    value: currKomax.number,\n    onChange: check,\n    disabled: isInEditMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  })), isNumberValid ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  }, props.numberErrMsg), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"komax.status_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    className: classes.select,\n    ref: statusRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: 1,\n    selected: currKomax.status === 1,\n    className: classes.option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \"Works\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: 2,\n    selected: currKomax.status === 0,\n    className: classes.option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"Repair\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: 3,\n    selected: currKomax.status === 2,\n    className: classes.option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Not working\"))), isIdValid ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }\n  }, props.idErrMsg)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SaveButton, {\n    click: collectData,\n    disable: props.isFetching || !props.isValid,\n    value: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"save_button_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 101\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default KappaModalForm;","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Komaxes/KappaModal/KappaModalForm.js"],"names":["React","useState","classes","createKomax","SaveButton","FormattedMessage","Multiselect","KappaModalForm","props","currKomax","selected","komaxNumberRef","createRef","statusRef","collectData","e","close","data","number","current","value","status","send","isInEditMode","heading","isNumberValid","numberErrMsg","length","isIdValid","idErrMsg","check","Number","checkValid","ModalForm","closeBtn","inputs","input","invalidInput","error","select","option","toolbar","isFetching","isValid"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport classes from \"./KappaModalForm.module.css\";\nimport createKomax from \"../../../DAL/models/komax\";\nimport SaveButton from \"../../common/SaveButton/SaveButton\";\nimport {FormattedMessage} from 'react-intl';\nimport { Multiselect } from 'multiselect-react-dropdown';\n\nlet KappaModalForm = (props) => {\n\n    let currKomax = props.selected;\n    if (!currKomax){\n        currKomax = createKomax({});\n    }\n\n    let komaxNumberRef = React.createRef();\n    let statusRef = React.createRef();\n\n    let collectData = (e) => {\n        props.close();\n        let data = {\n            number : komaxNumberRef.current.value,\n            status : statusRef.current.value\n        }\n\n        props.send(data);\n    };\n\n    let isInEditMode = props.heading === \"Изменить существующий аппарат\";\n    let isNumberValid = props.numberErrMsg.length === 0;\n    let isIdValid = props.idErrMsg.length === 0;\n\n    let check = (e) => {\n        if (!isInEditMode){\n            let number = Number(komaxNumberRef.current.value);\n            props.checkValid(number);\n        }\n    }\n\n    return(\n        <div className={classes.ModalForm}>\n            <div className={classes.heading}>\n                <h2>{props.heading}</h2>\n                <button onClick={props.close} className={classes.closeBtn}>X</button>\n            </div>\n            <div className={classes.inputs}>\n                <label>\n                    <FormattedMessage id={\"komax.number_label\"}/>\n                    <input type={\"text\"} className={`${classes.input} ${!isNumberValid ? classes.invalidInput :\"\"}`} ref={komaxNumberRef} value={currKomax.number} onChange={check} disabled={isInEditMode}/>\n                </label>\n                {isNumberValid\n                    ? <></>\n                    : <div className={classes.error}>\n                        {props.numberErrMsg}\n                      </div>\n                }\n                <label>\n                    <FormattedMessage id={\"komax.status_label\"}/>\n                    <select className={classes.select} ref={statusRef}>\n                        <option value={1} selected={currKomax.status === 1} className={classes.option}>Works</option>\n                        <option value={2} selected={currKomax.status === 0} className={classes.option}>Repair</option>\n                        <option value={3} selected={currKomax.status === 2} className={classes.option}>Not working</option>\n                    </select>\n                </label>\n                {isIdValid\n                    ? <></>\n                    : <div className={classes.error}>\n                        {props.idErrMsg}\n                      </div>\n                }\n            </div>\n            <div className={classes.toolbar}>\n                <SaveButton click={collectData} disable={props.isFetching || !props.isValid} value={<FormattedMessage id={\"save_button_label\"}/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default KappaModalForm;"]},"metadata":{},"sourceType":"module"}
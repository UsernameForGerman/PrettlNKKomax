{"ast":null,"code":"var _jsxFileName = \"/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Seals/SealsContainer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport SealsPage from \"./SealsPage\";\nimport auth from \"../AuthHOC/authHOC\";\nimport { connect } from \"react-redux\";\nimport SealSelector from \"../../selectors/sealSelector\";\nimport { deleteSealThunk, getSealsListThunk, updateSealThunk } from \"../../reducers/sealReducer\";\nimport classes from \"./SealsPage.module.css\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport IconButton from \"../common/IconButton/IconButton\";\nimport { FormattedMessage } from \"react-intl\";\n\nlet SealsContainer = props => {\n  useEffect(() => {\n    props.getSeals();\n  }, props.seals.length);\n  let [selectedSeal, setSelectedSeal] = useState({});\n  let [isModalOpen, setModalOpen] = useState(false);\n  let [isCreateOpen, setCreateOpen] = useState(false);\n\n  let openCreate = () => {\n    setCreateOpen(true);\n  };\n\n  let closeCreate = () => {\n    setCreateOpen(false);\n  };\n\n  let closeModal = () => {\n    setModalOpen(false);\n  };\n\n  let renderedSeals = props.seals.map(seal => {\n    let select = () => {\n      setSelectedSeal(seal);\n      setModalOpen(true);\n    };\n\n    let del = e => {\n      e.stopPropagation();\n      props.deleteSeal(seal);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.row,\n      onClick: select,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, seal.seal_name), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, seal.seal_available ? \"+\" : \"-\"), /*#__PURE__*/React.createElement(IconButton, {\n      icon: ['fas', 'trash'],\n      class: classes.btn,\n      click: del,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  });\n  let heading = /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.heading_row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    className: classes.heading_text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"seal_name_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 53\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    className: classes.heading_text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"terminal.material_avaliable_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 53\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    className: classes.heading_text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"terminal.delete_label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 53\n    }\n  }))));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SealsPage, {\n    list: renderedSeals,\n    isModalOpen: isModalOpen,\n    isCreateOpen: isCreateOpen,\n    close: closeModal,\n    selectedSeal: selectedSeal,\n    heading: heading,\n    updateSeal: props.updateSeal,\n    openCreate: openCreate,\n    closeCreate: closeCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }));\n};\n\nlet mapStateToProps = state => {\n  return {\n    seals: SealSelector.getList(state),\n    isFetching: SealSelector.getFetching(state)\n  };\n};\n\nlet mapDispatchProps = dispatch => {\n  return {\n    getSeals: () => {\n      dispatch(getSealsListThunk());\n    },\n    updateSeal: seal => {\n      dispatch(updateSealThunk(seal));\n    },\n    deleteSeal: seal => {\n      dispatch(deleteSealThunk(seal));\n    }\n  };\n};\n\nexport default auth(connect(mapStateToProps, mapDispatchProps)(SealsContainer));","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Seals/SealsContainer.js"],"names":["React","useEffect","useState","SealsPage","auth","connect","SealSelector","deleteSealThunk","getSealsListThunk","updateSealThunk","classes","Preloader","IconButton","FormattedMessage","SealsContainer","props","getSeals","seals","length","selectedSeal","setSelectedSeal","isModalOpen","setModalOpen","isCreateOpen","setCreateOpen","openCreate","closeCreate","closeModal","renderedSeals","map","seal","select","del","e","stopPropagation","deleteSeal","row","data","seal_name","seal_available","btn","heading","heading_row","heading_text","updateSeal","mapStateToProps","state","getList","isFetching","getFetching","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport SealsPage from \"./SealsPage\";\nimport auth from \"../AuthHOC/authHOC\";\nimport {connect} from \"react-redux\";\nimport SealSelector from \"../../selectors/sealSelector\";\nimport {deleteSealThunk, getSealsListThunk, updateSealThunk} from \"../../reducers/sealReducer\";\nimport classes from \"./SealsPage.module.css\"\nimport Preloader from \"../common/Preloader/Preloader\";\nimport IconButton from \"../common/IconButton/IconButton\";\nimport {FormattedMessage} from \"react-intl\";\n\nlet SealsContainer = (props) => {\n    useEffect(() => {\n        props.getSeals();\n    }, props.seals.length);\n\n    let [selectedSeal, setSelectedSeal] = useState({});\n    let [isModalOpen, setModalOpen] = useState(false);\n    let [isCreateOpen, setCreateOpen] = useState(false);\n\n    let openCreate = () => {\n        setCreateOpen(true);\n    }\n\n    let closeCreate = () => {\n        setCreateOpen(false);\n    }\n\n    let closeModal = () => {\n        setModalOpen(false);\n    }\n\n    let renderedSeals = props.seals.map(seal => {\n        let select = () => {\n            setSelectedSeal(seal);\n            setModalOpen(true);\n        }\n\n        let del = (e) => {\n            e.stopPropagation();\n            props.deleteSeal(seal);\n        }\n\n        return (\n            <div className={classes.row} onClick={select}>\n                <div className={classes.data}>\n                    {seal.seal_name}\n                </div>\n                <div className={classes.data}>\n                    {seal.seal_available ? \"+\" : \"-\"}\n                </div>\n                <IconButton icon={['fas', 'trash']} class={classes.btn} click={del}/>\n            </div>\n        )\n    })\n\n    let heading = (\n        <div className={classes.heading_row}>\n            <div className={classes.data}>\n                <b className={classes.heading_text}><FormattedMessage id={\"seal_name_label\"}/></b>\n            </div>\n            <div className={classes.data}>\n                <b className={classes.heading_text}><FormattedMessage id={\"terminal.material_avaliable_label\"}/></b>\n            </div>\n            <div className={classes.data}>\n                <b className={classes.heading_text}><FormattedMessage id={\"terminal.delete_label\"}/></b>\n            </div>\n        </div>\n    )\n\n    return (\n        <>\n            <SealsPage\n                list={renderedSeals}\n                isModalOpen={isModalOpen}\n                isCreateOpen={isCreateOpen}\n                close={closeModal}\n                selectedSeal={selectedSeal}\n                heading={heading}\n                updateSeal={props.updateSeal}\n                openCreate={openCreate}\n                closeCreate={closeCreate}\n            />\n        </>\n    )\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        seals : SealSelector.getList(state),\n        isFetching : SealSelector.getFetching(state)\n    }\n}\n\nlet mapDispatchProps = (dispatch) => {\n    return {\n        getSeals : () => {\n            dispatch(getSealsListThunk())\n        },\n\n        updateSeal : (seal) => {\n            dispatch(updateSealThunk(seal))\n        },\n\n        deleteSeal : (seal) => {\n            dispatch(deleteSealThunk(seal))\n        }\n    }\n}\n\nexport default auth(connect(mapStateToProps, mapDispatchProps)(SealsContainer));"]},"metadata":{},"sourceType":"module"}
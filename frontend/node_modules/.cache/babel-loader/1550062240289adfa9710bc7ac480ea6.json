{"ast":null,"code":"var _jsxFileName = \"/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Komax terminal/KomaxTerminalContainer.js\";\nimport KomaxTerminal from \"./KomaxTerminal\";\nimport React, { useEffect, useState } from \"react\";\nimport KomaxTerminalTableItem from \"./KomaxTerminalTable/Item/KTTItem\";\nimport auth from \"../AuthHOC/authHOC\";\nimport TerminalSelector from \"../../selectors/terminalSelector\";\nimport { connect } from \"react-redux\";\nimport { deleteTerminalThunk, getTerminalListThunk, updateTerminalThunk } from \"../../reducers/komaxTerminalReducer\";\nimport FullScreenPreloader from \"../common/Preloader/FullScreenPreloader\";\n\nlet KomaxTerminalContainer = props => {\n  const [selectedTerminal, setSelectedTerminal] = useState({});\n  const [materialValue, setMaterialValue] = useState();\n  const [terminalAvaliable, setTerminalAvaliable] = useState();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isCreateOpen, setCreateOpen] = useState(false);\n\n  let openCreate = e => {\n    setCreateOpen(true);\n  };\n\n  let closeCreate = e => {\n    setCreateOpen(false);\n  };\n\n  let closeModal = e => {\n    setIsModalOpen(false);\n  };\n\n  let openModal = e => {\n    setIsModalOpen(true);\n  };\n\n  useEffect(() => {\n    props.fetchList();\n  }, props.terminalList.length);\n  let list = props.terminalList;\n\n  if (!list) {\n    list = [];\n  }\n\n  let items = list.map(item => {\n    let select = () => {\n      setSelectedTerminal(item);\n      setMaterialValue(item.seal_installed);\n      setTerminalAvaliable(item.terminal_avaliable);\n      openModal();\n    };\n\n    let del = e => {\n      e.stopPropagation();\n      props.deleteTerminal(item);\n    };\n\n    return /*#__PURE__*/React.createElement(KomaxTerminalTableItem, Object.assign({}, item, {\n      select: select,\n      del: del,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.isFetching ? /*#__PURE__*/React.createElement(FullScreenPreloader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(KomaxTerminal, {\n    items: items,\n    selected: selectedTerminal,\n    setMaterial: setMaterialValue,\n    setTerminal: setTerminalAvaliable,\n    terminalAvaliable: terminalAvaliable,\n    materialValue: materialValue,\n    isModalOpen: isModalOpen,\n    setIsModalOpen: setIsModalOpen,\n    closeModal: closeModal,\n    isCreateOpen: isCreateOpen,\n    openCreate: openCreate,\n    closeCreate: closeCreate,\n    updateTerminal: props.updateTerminal,\n    deleteTerminal: props.deleteTerminal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }));\n};\n\nlet mapStateToProps = state => {\n  return {\n    terminalList: TerminalSelector.getList(state),\n    isFetching: TerminalSelector.getFetching(state)\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    fetchList: () => {\n      dispatch(getTerminalListThunk());\n    },\n    updateTerminal: terminal => {\n      dispatch(updateTerminalThunk(terminal));\n    },\n    deleteTerminal: terminal => {\n      dispatch(deleteTerminalThunk(terminal));\n    }\n  };\n};\n\nexport default auth(connect(mapStateToProps, mapDispatchToProps)(KomaxTerminalContainer));","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Komax terminal/KomaxTerminalContainer.js"],"names":["KomaxTerminal","React","useEffect","useState","KomaxTerminalTableItem","auth","TerminalSelector","connect","deleteTerminalThunk","getTerminalListThunk","updateTerminalThunk","FullScreenPreloader","KomaxTerminalContainer","props","selectedTerminal","setSelectedTerminal","materialValue","setMaterialValue","terminalAvaliable","setTerminalAvaliable","isModalOpen","setIsModalOpen","isCreateOpen","setCreateOpen","openCreate","e","closeCreate","closeModal","openModal","fetchList","terminalList","length","list","items","map","item","select","seal_installed","terminal_avaliable","del","stopPropagation","deleteTerminal","isFetching","updateTerminal","mapStateToProps","state","getList","getFetching","mapDispatchToProps","dispatch","terminal"],"mappings":"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","sourcesContent":["import KomaxTerminal from \"./KomaxTerminal\";\nimport React, {useEffect, useState} from \"react\";\nimport KomaxTerminalTableItem from \"./KomaxTerminalTable/Item/KTTItem\";\nimport auth from \"../AuthHOC/authHOC\";\nimport TerminalSelector from \"../../selectors/terminalSelector\";\nimport {connect} from \"react-redux\";\nimport {deleteTerminalThunk, getTerminalListThunk, updateTerminalThunk} from \"../../reducers/komaxTerminalReducer\";\nimport FullScreenPreloader from \"../common/Preloader/FullScreenPreloader\";\n\nlet KomaxTerminalContainer = (props) => {\n    const [selectedTerminal, setSelectedTerminal] = useState({});\n    const [materialValue, setMaterialValue] = useState();\n    const [terminalAvaliable, setTerminalAvaliable] = useState();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isCreateOpen, setCreateOpen] = useState(false);\n\n    let openCreate = (e) => {\n        setCreateOpen(true);\n    }\n\n    let closeCreate = (e) => {\n        setCreateOpen(false);\n    }\n\n    let closeModal = (e) => {\n        setIsModalOpen(false);\n    }\n\n    let openModal = (e) => {\n        setIsModalOpen(true);\n    }\n\n    useEffect(() => {\n        props.fetchList();\n    }, props.terminalList.length)\n\n    let list = props.terminalList;\n    if (!list){\n        list = [];\n    }\n    let items = list.map((item) => {\n        let select = () => {\n            setSelectedTerminal(item);\n            setMaterialValue(item.seal_installed);\n            setTerminalAvaliable(item.terminal_avaliable);\n            openModal();\n        }\n\n        let del = (e) => {\n            e.stopPropagation();\n            props.deleteTerminal(item);\n        }\n        return (\n            <KomaxTerminalTableItem {...item} select={select} del={del}/>\n        )\n    })\n\n    return(\n        <>\n            {props.isFetching\n                ? <FullScreenPreloader/>\n                : <KomaxTerminal items={items}\n                       selected={selectedTerminal}\n                       setMaterial={setMaterialValue}\n                       setTerminal={setTerminalAvaliable}\n                       terminalAvaliable={terminalAvaliable}\n                       materialValue={materialValue}\n                       isModalOpen={isModalOpen}\n                       setIsModalOpen={setIsModalOpen}\n                       closeModal={closeModal}\n                       isCreateOpen={isCreateOpen}\n                       openCreate={openCreate}\n                       closeCreate={closeCreate}\n                       updateTerminal={props.updateTerminal}\n                       deleteTerminal={props.deleteTerminal}\n                />\n            }\n        </>\n    )\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        terminalList : TerminalSelector.getList(state),\n        isFetching : TerminalSelector.getFetching(state)\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return{\n        fetchList : () => {\n            dispatch(getTerminalListThunk())\n        },\n\n        updateTerminal : (terminal) => {\n            dispatch(updateTerminalThunk(terminal))\n        },\n\n        deleteTerminal : (terminal) => {\n            dispatch(deleteTerminalThunk(terminal))\n        }\n    }\n}\n\nexport default auth(connect(mapStateToProps, mapDispatchToProps)(KomaxTerminalContainer));"]},"metadata":{},"sourceType":"module"}
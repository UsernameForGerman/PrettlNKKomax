{"ast":null,"code":"import _objectSpread from\"/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import labourApi from\"../DAL/labour/labour_api\";import handle401 from\"./handle401\";var initialState={isFetching:false,labourList:[]};var TOGGLE_FETCHING=\"LABOUR/TOGGLE_FETCHING\";var SET_LIST=\"LABOUR/TOGGLE_SET_LIST\";var labourReducer=function labourReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var stateCopy=_objectSpread({},state);switch(action.type){case TOGGLE_FETCHING:{stateCopy.isFetching=!stateCopy.isFetching;break;}case SET_LIST:{stateCopy.labourList=action.list;break;}}return stateCopy;};var toggleFetchAC=function toggleFetchAC(){return{type:TOGGLE_FETCHING};};var setListAC=function setListAC(list){return{type:SET_LIST,list:list};};var getListThunk=function getListThunk(){return function(dispatch){dispatch(toggleFetchAC());labourApi.getLabourList().then(function(data){dispatch(setListAC(data));dispatch(toggleFetchAC());}).catch(function(err){handle401(err,dispatch);});};};var createLabourThunk=function createLabourThunk(labour){return function(dispatch){dispatch(toggleFetchAC());labourApi.createLabour(labour).then(function(data){dispatch(getListThunk());dispatch(toggleFetchAC());}).catch(function(err){handle401(err,dispatch);});};};var updateLabourThunk=function updateLabourThunk(labour){return function(dispatch){dispatch(toggleFetchAC());labourApi.updateLabour(labour).then(function(data){dispatch(getListThunk());dispatch(toggleFetchAC());}).catch(function(err){handle401(err,dispatch);});};};export{labourReducer,getListThunk,createLabourThunk,updateLabourThunk};","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/reducers/labourReducer.js"],"names":["labourApi","handle401","initialState","isFetching","labourList","TOGGLE_FETCHING","SET_LIST","labourReducer","state","action","stateCopy","type","list","toggleFetchAC","setListAC","getListThunk","dispatch","getLabourList","then","data","catch","err","createLabourThunk","labour","createLabour","updateLabourThunk","updateLabour"],"mappings":"4KAAA,MAAOA,CAAAA,SAAP,KAAsB,0BAAtB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,UAAU,CAAG,KADI,CAEjBC,UAAU,CAAG,EAFI,CAArB,CAKA,GAAMC,CAAAA,eAAe,CAAG,wBAAxB,CACA,GAAMC,CAAAA,QAAQ,CAAG,wBAAjB,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBN,YAAyB,IAAXO,CAAAA,MAAW,2CACpD,GAAIC,CAAAA,SAAS,kBAAOF,KAAP,CAAb,CACA,OAAQC,MAAM,CAACE,IAAf,EACI,IAAKN,CAAAA,eAAL,CAAuB,CACnBK,SAAS,CAACP,UAAV,CAAuB,CAACO,SAAS,CAACP,UAAlC,CACA,MACH,CAED,IAAKG,CAAAA,QAAL,CAAgB,CACZI,SAAS,CAACN,UAAV,CAAuBK,MAAM,CAACG,IAA9B,CACA,MACH,CATL,CAWA,MAAOF,CAAAA,SAAP,CACH,CAdD,CAgBA,GAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB,MAAO,CACHF,IAAI,CAAGN,eADJ,CAAP,CAGH,CAJD,CAMA,GAAMS,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACF,IAAD,CAAU,CACxB,MAAO,CACHD,IAAI,CAAGL,QADJ,CAEHM,IAAI,CAAGA,IAFJ,CAAP,CAIH,CALD,CAOA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACvB,MAAO,UAACC,QAAD,CAAc,CACjBA,QAAQ,CAACH,aAAa,EAAd,CAAR,CACAb,SAAS,CAACiB,aAAV,GACKC,IADL,CACU,SAACC,IAAD,CAAU,CACZH,QAAQ,CAACF,SAAS,CAACK,IAAD,CAAV,CAAR,CACAH,QAAQ,CAACH,aAAa,EAAd,CAAR,CACH,CAJL,EAKKO,KALL,CAKW,SAAAC,GAAG,CAAI,CACVpB,SAAS,CAACoB,GAAD,CAAML,QAAN,CAAT,CACH,CAPL,EAQH,CAVD,CAWH,CAZD,CAcA,GAAMM,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAY,CAClC,MAAO,UAACP,QAAD,CAAc,CACjBA,QAAQ,CAACH,aAAa,EAAd,CAAR,CACAb,SAAS,CAACwB,YAAV,CAAuBD,MAAvB,EACKL,IADL,CACU,SAACC,IAAD,CAAU,CACZH,QAAQ,CAACD,YAAY,EAAb,CAAR,CACAC,QAAQ,CAACH,aAAa,EAAd,CAAR,CACH,CAJL,EAKKO,KALL,CAKW,SAAAC,GAAG,CAAI,CACVpB,SAAS,CAACoB,GAAD,CAAML,QAAN,CAAT,CACH,CAPL,EAQH,CAVD,CAWH,CAZD,CAcA,GAAMS,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACF,MAAD,CAAY,CAClC,MAAO,UAACP,QAAD,CAAc,CACjBA,QAAQ,CAACH,aAAa,EAAd,CAAR,CACAb,SAAS,CAAC0B,YAAV,CAAuBH,MAAvB,EACKL,IADL,CACU,SAACC,IAAD,CAAU,CACZH,QAAQ,CAACD,YAAY,EAAb,CAAR,CACAC,QAAQ,CAACH,aAAa,EAAd,CAAR,CACH,CAJL,EAKKO,KALL,CAKW,SAAAC,GAAG,CAAI,CACVpB,SAAS,CAACoB,GAAD,CAAML,QAAN,CAAT,CACH,CAPL,EAQH,CAVD,CAWH,CAZD,CAcA,OAAQT,aAAR,CAAuBQ,YAAvB,CAAqCO,iBAArC,CAAwDG,iBAAxD","sourcesContent":["import labourApi from \"../DAL/labour/labour_api\";\nimport handle401 from \"./handle401\";\n\nconst initialState = {\n    isFetching : false,\n    labourList : []\n}\n\nconst TOGGLE_FETCHING = \"LABOUR/TOGGLE_FETCHING\";\nconst SET_LIST = \"LABOUR/TOGGLE_SET_LIST\";\n\nconst labourReducer = (state = initialState, action) => {\n    let stateCopy = {...state};\n    switch (action.type) {\n        case TOGGLE_FETCHING : {\n            stateCopy.isFetching = !stateCopy.isFetching;\n            break;\n        }\n\n        case SET_LIST : {\n            stateCopy.labourList = action.list;\n            break;\n        }\n    }\n    return stateCopy;\n}\n\nconst toggleFetchAC = () => {\n    return {\n        type : TOGGLE_FETCHING\n    }\n}\n\nconst setListAC = (list) => {\n    return {\n        type : SET_LIST,\n        list : list\n    }\n}\n\nconst getListThunk = () => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        labourApi.getLabourList()\n            .then((data) => {\n                dispatch(setListAC(data));\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch);\n            });\n    }\n}\n\nconst createLabourThunk = (labour) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        labourApi.createLabour(labour)\n            .then((data) => {\n                dispatch(getListThunk());\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch)\n            });\n    }\n}\n\nconst updateLabourThunk = (labour) => {\n    return (dispatch) => {\n        dispatch(toggleFetchAC());\n        labourApi.updateLabour(labour)\n            .then((data) => {\n                dispatch(getListThunk());\n                dispatch(toggleFetchAC());\n            })\n            .catch(err => {\n                handle401(err, dispatch)\n            });\n    }\n}\n\nexport {labourReducer, getListThunk, createLabourThunk, updateLabourThunk}"]},"metadata":{},"sourceType":"module"}
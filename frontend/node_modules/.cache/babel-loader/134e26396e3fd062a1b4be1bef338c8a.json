{"ast":null,"code":"var _jsxFileName = \"/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Komaxes/KomaxesContainer.js\";\nimport { connect } from \"react-redux\";\nimport KomaxSelector from \"../../selectors/komaxSelector\";\nimport { createKomaxThunk, getListThunk, getStatusesThunk, updateKomaxThunk } from \"../../reducers/komaxReducer\";\nimport React, { useEffect, useState } from \"react\";\nimport Komaxes from \"./Komaxes\";\nimport auth from \"../AuthHOC/authHOC\";\nimport classes from \"./Komaxes.module.css\";\nimport komax from \"../../assets/images/komax.png\";\nimport FullScreenPreloader from \"../common/Preloader/FullScreenPreloader\";\nimport KappaSelector from \"../../selectors/kappaSelector\";\nimport { getKappasThunk, updateKappaThunk } from \"../../reducers/kappasReducer\";\n\nlet KomaxesContainer = props => {\n  useEffect(() => {\n    if (props.komaxList.length === 0) {\n      props.fetchKomaxes();\n    }\n\n    props.getStatuses();\n  }, props.komaxList.length);\n  useEffect(() => {\n    props.fetchKappas();\n  }, [props.kappaList.length]);\n  let [selectedKomax, setSelectedKomax] = useState({});\n\n  let save = komax => {\n    props.createKomax(komax);\n  };\n\n  let update = komax => {\n    props.updateKomax(komax);\n  };\n\n  let statusDict = {};\n  props.statuses.forEach(status => {\n    statusDict[status.komax] = status.task_personal;\n  });\n\n  let getColorByNumber = number => {\n    let status = statusDict[number];\n    if (status === undefined) return \"white\";\n    if (status === null) return \"red\";\n    return \"green\";\n  };\n\n  let renderedKomaxItems = props.komaxList.map(elem => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.komaxItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.komaxItemId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, elem.number), /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        backgroundColor: getColorByNumber(elem.number)\n      },\n      src: komax,\n      alt: \"komax\",\n      className: classes.komaxImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.isFetching ? /*#__PURE__*/React.createElement(FullScreenPreloader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(Komaxes, Object.assign({}, props, {\n    items: renderedKomaxItems,\n    save: save,\n    update: update,\n    updateKappa: props.updateKappa,\n    selectedKomax: selectedKomax,\n    setSelected: setSelectedKomax,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }\n  })));\n};\n\nlet mapStateToProps = state => {\n  return {\n    isFetching: KomaxSelector.getFetching(state),\n    komaxList: KomaxSelector.getList(state),\n    kappaList: KappaSelector.getList(state),\n    statuses: KomaxSelector.getStatuses(state)\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    getStatuses: () => {\n      dispatch(getStatusesThunk());\n    },\n    fetchKomaxes: () => {\n      dispatch(getListThunk());\n    },\n    fetchKappas: () => {\n      dispatch(getKappasThunk());\n    },\n    createKomax: komax => {\n      dispatch(createKomaxThunk(komax));\n    },\n    updateKomax: komax => {\n      dispatch(updateKomaxThunk(komax));\n    },\n    updateKappa: kappa => {\n      dispatch(updateKappaThunk(kappa));\n    }\n  };\n};\n\nexport default auth(connect(mapStateToProps, mapDispatchToProps)(KomaxesContainer));","map":{"version":3,"sources":["/home/whatruska/PycharmProjects/PrettlNKKomax/frontend/src/comp/Komaxes/KomaxesContainer.js"],"names":["connect","KomaxSelector","createKomaxThunk","getListThunk","getStatusesThunk","updateKomaxThunk","React","useEffect","useState","Komaxes","auth","classes","komax","FullScreenPreloader","KappaSelector","getKappasThunk","updateKappaThunk","KomaxesContainer","props","komaxList","length","fetchKomaxes","getStatuses","fetchKappas","kappaList","selectedKomax","setSelectedKomax","save","createKomax","update","updateKomax","statusDict","statuses","forEach","status","task_personal","getColorByNumber","number","undefined","renderedKomaxItems","map","elem","komaxItem","komaxItemId","backgroundColor","komaxImg","isFetching","updateKappa","mapStateToProps","state","getFetching","getList","mapDispatchToProps","dispatch","kappa"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport KomaxSelector from \"../../selectors/komaxSelector\";\nimport {createKomaxThunk, getListThunk, getStatusesThunk, updateKomaxThunk} from \"../../reducers/komaxReducer\";\nimport React, {useEffect, useState} from \"react\";\nimport Komaxes from \"./Komaxes\";\nimport auth from \"../AuthHOC/authHOC\";\nimport classes from \"./Komaxes.module.css\";\nimport komax from \"../../assets/images/komax.png\";\nimport FullScreenPreloader from \"../common/Preloader/FullScreenPreloader\";\nimport KappaSelector from \"../../selectors/kappaSelector\";\nimport {getKappasThunk, updateKappaThunk} from \"../../reducers/kappasReducer\";\n\nlet KomaxesContainer = (props) => {\n    useEffect(() => {\n        if(props.komaxList.length === 0){\n             props.fetchKomaxes();\n        }\n\n        props.getStatuses();\n    }, props.komaxList.length);\n\n    useEffect(() => {\n        props.fetchKappas();\n    }, [props.kappaList.length])\n\n    let [selectedKomax, setSelectedKomax] = useState({});\n\n    let save = (komax) => {\n        props.createKomax(komax);\n    }\n\n    let update = (komax) => {\n        props.updateKomax(komax);\n    }\n\n    let statusDict = {};\n    props.statuses.forEach(status => {\n        statusDict[status.komax] = status.task_personal;\n    });\n\n    let getColorByNumber = (number) => {\n        let status = statusDict[number];\n        if (status === undefined) return \"white\";\n        if (status === null) return \"red\";\n        return \"green\";\n    }\n\n    let renderedKomaxItems = props.komaxList.map((elem) => {\n        return (\n            <div className={classes.komaxItem}>\n                <div className={classes.komaxItemId}>\n                    {elem.number}\n                </div>\n                <img style={{backgroundColor : getColorByNumber(elem.number)}} src={komax} alt={\"komax\"} className={classes.komaxImg}/>\n            </div>\n        );\n    });\n\n    return(\n        <>\n            {props.isFetching\n                ? <FullScreenPreloader/>\n                : <Komaxes\n                    {...props}\n                    items={renderedKomaxItems}\n                    save={save}\n                    update={update}\n                    updateKappa={props.updateKappa}\n                    selectedKomax={selectedKomax}\n                    setSelected={setSelectedKomax}\n                />\n            }\n        </>\n    )\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        isFetching : KomaxSelector.getFetching(state),\n        komaxList : KomaxSelector.getList(state),\n        kappaList : KappaSelector.getList(state),\n        statuses : KomaxSelector.getStatuses(state)\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        getStatuses : () => {\n            dispatch(getStatusesThunk())\n        },\n\n        fetchKomaxes : () => {\n            dispatch(getListThunk())\n        },\n\n        fetchKappas : () => {\n            dispatch(getKappasThunk())\n        },\n\n        createKomax : (komax) => {\n            dispatch(createKomaxThunk(komax))\n        },\n\n        updateKomax : (komax) => {\n            dispatch(updateKomaxThunk(komax))\n        },\n\n        updateKappa : (kappa) => {\n            dispatch(updateKappaThunk(kappa))\n        }\n    }\n}\n\nexport default auth(connect(mapStateToProps, mapDispatchToProps)(KomaxesContainer));"]},"metadata":{},"sourceType":"module"}